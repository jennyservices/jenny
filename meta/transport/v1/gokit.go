// Automatically generated by Jenny. DO NOT EDIT!

// Package v1 is generated from a swagger definition.
package v1

import (
	"context"
	"net/http"

	"github.com/jennyservices/jenny/encoders"
	"github.com/jennyservices/jenny/options"
	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
)

var ()

// SpecsService is as implemented in the swagger definition
type SpecsService interface {
	Specs(ctx context.Context) ([]*Spec, error)
}

// Spec as defined in swagger
type Spec struct {
	Hash              []byte `json:"hash" schema:"hash"`
	Name              string `json:"name" schema:"name"`
	SwaggerDefinition []byte `json:"swagger_definition" schema:"swagger_definition"`
	Version           string `json:"version" schema:"version"`
}

type _specsResponse struct {
	_UNNAMED4r0u4C []*Spec
}

func specsEncoder(ctx context.Context) (encoders.NewEncoderFunc, string) {
	produces := []string{"application/json", "application/xml"}
	if encoder, mimeType, err := encoders.ResponseEncoder(ctx, produces); err == nil {
		return encoder, mimeType
	}
	return encoders.TextEncoder, "text/plain"
}

// Accept application/json application/xml
func encodeSpecsResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {

	resp := response.(_specsResponse)

	enc, mt := specsEncoder(ctx)
	w.Header().Set("Content-Type", mt)
	return enc(w).Encode(resp._UNNAMED4r0u4C)

	return nil
}

type _specsRequest struct {
}

var ()

// Content-Type
func decodeSpecsRequest(ctx context.Context, r *http.Request) (interface{}, error) {

	consumes := []string{}
	_ = consumes
	var request _specsRequest

	return request, nil
}

func makeSpecsEndpoint(svc SpecsService) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {

		resp := _specsResponse{}
		var err error
		resp._UNNAMED4r0u4C, err = svc.Specs(ctx)
		if err != nil {
			return nil, err
		}
		return resp, nil
	}
}

var ()

// NewSpecsService takes a SpecsService and returns a http
// transport server for the service as defined in the swagger definition.
func NewSpecsService(svc SpecsService, opts ...options.Option) http.Handler {
	r := mux.NewRouter()

	options := options.New()
	for _, optf := range opts {
		optf(options)
	}

	// setting up the Specs endpoint
	{
		//Make endpoint
		specsEndpoint := makeSpecsEndpoint(svc)
		// Chain middlewares
		specsEndpoint = options.OpMiddlewares("Specs")(specsEndpoint)

		specsHandler := httptransport.NewServer(
			specsEndpoint,
			decodeSpecsRequest,
			encodeSpecsResponse,
			options.HTTPOptions()...,
		)
		r.Handle("/_specs", specsHandler).Methods("GET")
	}

	return r
}

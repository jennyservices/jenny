// @flow
// Automatically generated by Jenny. DO NOT EDIT!
import matchstick from 'matchstick';
import fetch from 'cross-fetch';
import url from 'url';

type Header = {
  key?: string,
  values: string[]
};

type Request = {
  body: string,
  headers?: Header[],
  method?: string,
  url?: string
};

type Response = {
  body: string,
  headers?: Header[],
  status?: number
};

type Run = {
  addr: string,
  builder: string,
  pid: number,
  runner: string
};

type Service = {
  docker?: boolean,
  healthy?: boolean,
  name?: string,
  ready?: boolean,
  swagger?: boolean,
  swagger_definition: string
};

type Trip = {
  duration?: number,
  id?: string,
  method?: string,
  operationId?: string,
  request: Request,
  response: Response,
  status?: number,
  test?: string,
  url?: string
};

export default class DebugClient {
  constructor(baseurl: string) {
    this.baseURL = baseurl;
  }
  baseURL = '';

  async GetService(Name: string): Promise<string> {
    let pathMaker = matchstick(this.baseURL + `/services/{name}`, 'template');
    let path = pathMaker.stick({ name: Name });
    let u = url.parse(path);
    let data: string = await fetch(path);
    return data;
  }

  async GetTrip(ID: string): Promise<Trip> {
    let pathMaker = matchstick(this.baseURL + `/trips/{id}`, 'template');
    let path = pathMaker.stick({ id: ID });
    let u = url.parse(path);
    let data: Trip = await fetch(path);
    return data;
  }

  async Run(): Promise<Run> {
    let pathMaker = matchstick(this.baseURL + `/run`, 'template');
    let path = pathMaker.stick({});
    let u = url.parse(path);
    let data: Run = await fetch(path);
    return data;
  }

  async Services(): Promise<Service[]> {
    let pathMaker = matchstick(this.baseURL + `/services`, 'template');
    let path = pathMaker.stick({});
    let u = url.parse(path);
    let data: Service[] = await fetch(path);
    return data;
  }

  async Trips(): Promise<Trip[]> {
    let pathMaker = matchstick(this.baseURL + `/trips`, 'template');
    let path = pathMaker.stick({});
    let u = url.parse(path);
    let data: Trip[] = await fetch(path);
    return data;
  }
}

// @flow
// Automatically generated by Jenny. DO NOT EDIT!
import { createStore } from 'redux';
import fetch from 'cross-fetch';

export const GET_SERVICES = 'GET_SERVICES';
export const REQUEST_GET_SERVICES = 'REQUEST_GET_SERVICES';
export const RECIEVE_GET_SERVICES = 'RECIEVE_GET_SERVICES';
export const INVALIDATE_GET_SERVICES = 'FETCH_GET_SERVICES';
export const GET_TRIPS = 'GET_TRIPS';
export const REQUEST_GET_TRIPS = 'REQUEST_GET_TRIPS';
export const RECIEVE_GET_TRIPS = 'RECIEVE_GET_TRIPS';
export const INVALIDATE_GET_TRIPS = 'FETCH_GET_TRIPS';
export const RUNS = 'RUNS';
export const REQUEST_RUNS = 'REQUEST_RUNS';
export const RECIEVE_RUNS = 'RECIEVE_RUNS';
export const INVALIDATE_RUNS = 'FETCH_RUNS';
export const SERVICES = 'SERVICES';
export const REQUEST_SERVICES = 'REQUEST_SERVICES';
export const RECIEVE_SERVICES = 'RECIEVE_SERVICES';
export const INVALIDATE_SERVICES = 'FETCH_SERVICES';
export const TRIPS = 'TRIPS';
export const REQUEST_TRIPS = 'REQUEST_TRIPS';
export const RECIEVE_TRIPS = 'RECIEVE_TRIPS';
export const INVALIDATE_TRIPS = 'FETCH_TRIPS';

class DebugClient {
  constructor() {
    super();
  }
  baseURL = '';

  requestGetService(Name: string): string {
    return {
      type: REQUEST_GET_SERVICES,
      header: {},
      query: {},
      path: { Name: string }
    };
  }
  fetchGetService(Name: string): string {
    return dispatch => {
      dispatch(requestGetService(Name));
      return fetch(`/services/{name}`)
        .then(response => response.json())
        .then(json => dispatch(recieveGetService(Name, json)));
    };
  }
  GetService(Name: string): string {}

  requestGetTrip(ID: string): Trip {
    return {
      type: REQUEST_GET_TRIPS,
      header: {},
      query: {},
      path: { ID: string }
    };
  }
  fetchGetTrip(ID: string): Trip {
    return dispatch => {
      dispatch(requestGetTrip(ID));
      return fetch(`/trips/{id}`)
        .then(response => response.json())
        .then(json => dispatch(recieveGetTrip(ID, json)));
    };
  }
  GetTrip(ID: string): Trip {}

  requestRun(): Run {
    return {
      type: REQUEST_RUNS,
      header: {},
      query: {},
      path: {}
    };
  }
  fetchRun(): Run {
    return dispatch => {
      dispatch(requestRun());
      return fetch(`/run`)
        .then(response => response.json())
        .then(json => dispatch(recieveRun(json)));
    };
  }
  Run(): Run {}

  requestServices(): Service[] {
    return {
      type: REQUEST_SERVICES,
      header: {},
      query: {},
      path: {}
    };
  }
  fetchServices(): Service[] {
    return dispatch => {
      dispatch(requestServices());
      return fetch(`/services`)
        .then(response => response.json())
        .then(json => dispatch(recieveServices(json)));
    };
  }
  Services(): Service[] {}

  requestTrips(): Trip[] {
    return {
      type: REQUEST_TRIPS,
      header: {},
      query: {},
      path: {}
    };
  }
  fetchTrips(): Trip[] {
    return dispatch => {
      dispatch(requestTrips());
      return fetch(`/trips`)
        .then(response => response.json())
        .then(json => dispatch(recieveTrips(json)));
    };
  }
  Trips(): Trip[] {}
}

type Header = {
  key?: string,
  values: string[]
};

type Request = {
  body: string,
  headers?: Header[],
  method?: string,
  url?: string
};

type Response = {
  body: string,
  headers?: Header[],
  status?: integer
};

type Run = {
  addr: string,
  builder: string,
  pid: number,
  runner: string
};

type Service = {
  docker?: boolean,
  healthy?: boolean,
  name?: string,
  ready?: boolean,
  swagger?: boolean,
  swagger_definition: string
};

type Trip = {
  duration?: integer,
  id?: string,
  method?: string,
  operationId?: string,
  request: Request,
  response: Response,
  status?: integer,
  test?: string,
  url?: string
};

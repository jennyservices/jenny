// @flow
// Automatically generated by Jenny. DO NOT EDIT!
import matchstick from 'matchstick'
import fetch from 'cross-fetch';
import url from 'url';


type ErrorResponse = {
    Wrote?: boolean,
}

type Exception = {
    Stacktrace: StackTrace,
  Type?: string,
  Value?: string,
}

type ExtraInfo = {
    XRequestID: string,
}

type Frame = {
    AbsPath?: string,
  ContextLine?: string,
  Filename?: string,
  Function?: string,
  InApp?: boolean,
  Lineno?: number,
  Module?: string,
  PostContext: string[],
  PreContext: string[],
}

type Header = {
    Key?: string,
  Values: string[],
}

type Packet = {
    EventID?: string,
  Exception: Exception,
  Extra: ExtraInfo,
  Level?: string,
  Logger?: string,
  Message?: string,
  Platform?: string,
  Project?: string,
  ServerName?: string,
  Tags: string[],
}

type Request = {
    Body: string,
  Headers?: Header[],
  Method?: string,
  URL?: string,
}

type Response = {
    Body: string,
  Headers?: Header[],
  Status?: number,
}

type Run = {
    Addr: string,
  Builder: string,
  Pid: number,
  Runner: string,
}

type Service = {
    Docker?: boolean,
  Healthy?: boolean,
  Name?: string,
  Ready?: boolean,
  Swagger?: boolean,
  SwaggerDefinition: string,
}

type StackTrace = {
    Frames: Frame[],
}

type Trip = {
    Duration?: number,
  Errors: Packet[],
  ID?: string,
  Method?: string,
  OperationID?: string,
  Request: Request,
  Response: Response,
  Status?: number,
  Test?: string,
  URL?: string,
}


export default class DebugClient {
  constructor(baseurl: string) {
    this.baseURL=baseurl
   }
  baseURL = ""

  async GetService( Name: string,) : Promise<string>  {
  let pathMaker = matchstick(this.baseURL+`/services/{name}`, 'template');
  let path = pathMaker.stick({  name: Name, })
  let u = url.parse(path)
  let data : string  =  await fetch(path);
  return data
}

  async GetTrip( ID: string,) : Promise<Trip>  {
  let pathMaker = matchstick(this.baseURL+`/trips/{id}`, 'template');
  let path = pathMaker.stick({  id: ID, })
  let u = url.parse(path)
  let data : Trip  =  await fetch(path);
  return data
}

  async NewError( ID: string, Pkt: Packet,) : Promise<ErrorResponse>  {
  let pathMaker = matchstick(this.baseURL+`/api/{id}/store`, 'template');
  let path = pathMaker.stick({  id: ID, pkt: Pkt, })
  let u = url.parse(path)
  let data : ErrorResponse  =  await fetch(path);
  return data
}

  async Run() : Promise<Run>  {
  let pathMaker = matchstick(this.baseURL+`/run`, 'template');
  let path = pathMaker.stick({  })
  let u = url.parse(path)
  let data : Run  =  await fetch(path);
  return data
}

  async Services() : Promise<Service[]>  {
  let pathMaker = matchstick(this.baseURL+`/services`, 'template');
  let path = pathMaker.stick({  })
  let u = url.parse(path)
  let data : Service[]  =  await fetch(path);
  return data
}

  async Trips() : Promise<Trip[]>  {
  let pathMaker = matchstick(this.baseURL+`/trips`, 'template');
  let path = pathMaker.stick({  })
  let u = url.parse(path)
  let data : Trip[]  =  await fetch(path);
  return data
}

}
